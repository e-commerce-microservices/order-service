// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: order_crud.sql

package repository

import (
	"context"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO "order" (
    "customer_id", "supplier_id", "product_id", "quantity"
) VALUES (
    $1, $2, $3, $4
)
`

type CreateOrderParams struct {
	CustomerID int64
	SupplierID int64
	ProductID  int64
	Quantity   int32
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.CustomerID,
		arg.SupplierID,
		arg.ProductID,
		arg.Quantity,
	)
	return err
}

const getWaitingOrderByCustomer = `-- name: GetWaitingOrderByCustomer :many
SELECT id, customer_id, supplier_id, product_id, quantity, status, created_at FROM "order"
WHERE "customer_id" = $1
`

func (q *Queries) GetWaitingOrderByCustomer(ctx context.Context, customerID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getWaitingOrderByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.SupplierID,
			&i.ProductID,
			&i.Quantity,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWaitingOrderBySupplier = `-- name: GetWaitingOrderBySupplier :many
SELECT id, customer_id, supplier_id, product_id, quantity, status, created_at FROM "order"
WHERE "supplier_id" = $1
`

func (q *Queries) GetWaitingOrderBySupplier(ctx context.Context, supplierID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getWaitingOrderBySupplier, supplierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.SupplierID,
			&i.ProductID,
			&i.Quantity,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE "order"
SET "status" = $1
WHERE "id" = $2
`

type UpdateOrderStatusParams struct {
	Status interface{}
	ID     int64
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}
